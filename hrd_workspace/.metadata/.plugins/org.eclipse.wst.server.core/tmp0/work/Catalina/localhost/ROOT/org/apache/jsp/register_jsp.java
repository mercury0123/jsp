/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.69
 * Generated at: 2022-12-16 03:14:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.DriverManager;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	//DB연결정보
	Connection conn = null;
	PreparedStatement pst = null;
	ResultSet rs = null;
	
	//오늘날짜 작업하기(221216 추가)
	Calendar c = Calendar.getInstance();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); //mm(시간) MM(월)
	String today = sdf.format(c.getTime());
	
	//가장 마지막에 추가된 회원 번호를 불러오기
	String sql ="select max(custno) from member_tbl_02";
	try {
		Class.forName("oracle.jdbc.OracleDriver");
		conn = DriverManager.getConnection("jdbc:oracle:thin:@//localhost:1521/xe","system","ezen");		
		pst = conn.prepareStatement(sql);
		rs = pst.executeQuery(); //select 는 executeQuery()
		int custno = 100001;	//custno 가장 첫번째 값
		if (rs.next()){
			custno = rs.getInt(1)+1;	//getInt 첫번째 값은 0이므로 +1 처리
			
		}
		
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Register Page</title>\n");
      out.write("<link href=\"style.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<script type=\"text/javascript\" >\n");
      out.write("	function check_form(f) {\n");
      out.write("		if(f.custname.value ==\"\"){\n");
      out.write("			alert('회원성명이 입력되지 않았습니다');\n");
      out.write("			f.custname.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(f.phone.value ==\"\"){\n");
      out.write("			alert('회원전화가 입력되지 않았습니다');\n");
      out.write("			f.phone.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(f.address.value ==\"\"){\n");
      out.write("			alert('회원주소가 입력되지 않았습니다');\n");
      out.write("			f.address.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(f.joindate.value ==\"\"){\n");
      out.write("			alert('가입일자가 입력되지 않았습니다');\n");
      out.write("			f.joindate.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(f.grade.value ==\"\"){\n");
      out.write("			alert('회원등급이 입력되지 않았습니다');\n");
      out.write("			f.grade.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		if(f.city.value ==\"\"){\n");
      out.write("			alert('도시코드가 입력되지 않았습니다');\n");
      out.write("			f.city.focus();\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		success();\n");
      out.write("	    return true;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	function success(){\n");
      out.write("		alert('회원 등록이 완료되었습니다!!');\n");
      out.write("	}\n");
      out.write("</script>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\n");
      out.write("<section>\n");
      out.write("<h2>홈쇼핑 회원등록</h2>\n");
      out.write("	<form action=\"joinProcess.jsp\" method=\"post\" onsubmit=\"return check_form(this)\">\n");
      out.write("	<!-- <form name=\"frm\" action=\"#\" method=\"post\"> -->\n");
      out.write("		<table>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>회원번호(자동발생)</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"custno\" value=\"");
      out.print( custno );
      out.write("\" readonly=\"readonly\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>회원성명</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"custname\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>회원전화</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"phone\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>회원주소</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"address\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>가입일자</B></th>	<!-- 오늘날짜 작업하기(221216 추가) -->\n");
      out.write("				<td><input type=\"text\" name=\"joindate\" value=\"");
      out.print( today);
      out.write("\" readonly=\"readonly\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>고객등급[A:VIP,B:일반,C:직원]</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"grade\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<th><B>도시코드</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"city\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td colspan=\"2\">\n");
      out.write("				<input type=\"submit\" value=\"등록\" >&nbsp;&nbsp;&nbsp;\n");
      out.write("				<input type=\"button\" value=\"조회\" onclick=\"location.href='list.jsp'\">\n");
      out.write("				</td>				\n");
      out.write("			</tr>		\n");
      out.write("		</table>	\n");
      out.write("	</form>\n");
      out.write("</section>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("<!-- <th><B>회원번호(자동발생)</B></th>\n");
      out.write("				<td><input type=\"text\" name=\"custno\" value=\"\" readonly=\"readonly\"></td> \n");
      out.write("				이 값 처리해주고 catch로 닫아줌 -->\n");
      out.write("	");

		
	} catch (Exception e){	
		e.printStackTrace();	
	} finally {
		if(rs!=null) rs.close();
		if(pst!=null) pst.close();
		if(conn!=null) conn.close();
	}
	 
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
